Need to set the cuts
Need to have the RGA comparison file in this same folder (Improved_data_P.root)
need to fix training variables, ranges,and titles in training_vars

names are optional


...::: Category :::...
...::: Have to choose with the boolean! :::...
.L BDT.h
BDT l
l.config()
l.TrainingCategory(l.cut, l.DVCS, l.Pi0, l.Vars);
l.Training_vars(l.Data, l.DVCS, l.Pi0, l.cut);
gSystem->Exec("mv Analysis/Training_vars.pdf Analysis/Training_vars_All.pdf");
l.Training_vars(l.Data, l.DVCS, l.Pi0, l.cut + TCut("strip_Ph_Theta < 5"));
gSystem->Exec("mv Analysis/Training_vars.pdf Analysis/Training_vars_FT.pdf");
l.Training_vars(l.Data, l.DVCS, l.Pi0, l.cut + TCut("strip_Ph_Theta > 5"));
gSystem->Exec("mv Analysis/Training_vars.pdf Analysis/Training_vars_FD.pdf");
l.Add_BDT_var(l.cut, l.Data, l.TData, l.Vars);
l.Add_BDT_var(l.cut, l.DVCS, l.TDVCS, l.Vars);
l.Explore(l.TData, l.TDVCS, l.cut)
l.Filter(l.TData, l.cut + TCut("_strip_Nuc_BDT > 0.08"), TString("Data_NP_Theta_g_5.root"));
l.Add_BDT_var(l.cut, l.Pi0, l.TPi0, l.Vars);
l.Merge_Bins(l.TData,"Merged_Data.root");
l.Merge_Bins(l.TDVCS,"Merged_DVCS.root");
l.Merge_Bins(l.TPi0,"Merged_Pi0.root");



gSystem->Exec(Form("cd %s && ./Summary.sh", l.Folder))


l.Compare_two(l.cut, l.cut, l.TData , l.TData, TString("pass1_comparison.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder);
//l.Compare_two(l.cut, l.cut, l.TDVCS , l.TDVCS, TString("pass1_comparison_sim_DVCS.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder,1, true);
l.Compare_two(l.cut, l.cut, l.TPi0 , l.TPi0, TString("pass1_comparison_sim_Pi0.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder,1, true);
 
l.Compare_two(l.cut, l.cut, l.TData , l.TData, TString("pass1_comparison_1.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder,2); 
//l.Compare_two(l.cut, l.cut, l.TDVCS , l.TDVCS, TString("pass1_comparison_sim_DVCS_1.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder,2, true);
l.Compare_two(l.cut, l.cut, l.TPi0 , l.TPi0, TString("pass1_comparison_sim_Pi0_1.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder,2, true);


l.Compare_two(l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.TData , l.TData, TString("pass1_comparison_aft_BDT.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder); 
//l.Compare_two(l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.TDVCS , l.TDVCS, TString("pass1_comparison_sim_DVCS_aft_BDT.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder,1, true);
l.Compare_two(l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.TPi0 , l.TPi0, TString("pass1_comparison_sim_Pi0_aft_BDT.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder,1, true);
 
l.Compare_two(l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.TData , l.TData, TString("pass1_comparison_1_aft_BDT.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder,2); 
//l.Compare_two(l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.TDVCS , l.TDVCS, TString("pass1_comparison_sim_DVCS_1_aft_BDT.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder,2, true);
l.Compare_two(l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.cut + TCut(Form("_strip_Nuc_BDT>%f",l.BDT_value)), l.TPi0 , l.TPi0, TString("pass1_comparison_sim_Pi0_1_aft_BDT.pdf"), TString("/work/clas12/jsalvg/RGA-Analysis/inb/P/Analysis/"),l.Folder,2, true);

l.Filter(l.TData, l.cut + TCut("_strip_Nuc_BDT > 0.0"), TString("Data_NP_Theta_g_5.root"));


l.Add_BDT_var(l.cut, l.BM_Sim, l.TBM_Sim, l.Vars);
l.Filter(l.TBM_Sim, l.cut + TCut("_strip_Nuc_BDT > 0.0"), TString("Improved_BM_Sim.root"));
l.Compute_BM_Matrix();

l.Add_BDT_var(l.cut, "../Quality_Fake_Data_P.root", "TFake_Data.root", l.Vars);
l.Filter("TFake_Data.root", l.cut + TCut(Form("_strip_Nuc_BDT > %f",l.BDT_value)), TString("Remaining_Fake_Data.root"));

l.Estimate_Pi0(l.TData, TCut("bestCandidateFlag==1"), l.cut + TCut(Form("_strip_Nuc_BDT>%f ",l.BDT_value)))
l.Add_BDT_var2(l.TData);
l.Best(10, l.TData, l.TDVCS, l.cut)
l.Stack(l.cut, "N_Ph_in==1")


l.Add_BDT_var(l.cut, "../Quality_Fake_Data_P2.root", "TFake_Data.root", l.Vars);
l.Filter("TFake_Data.root", l.cut + TCut(Form("_strip_Nuc_BDT > %f",l.BDT_value)), TString("Remaining_Fake_Data.root"));

l.Is_Pi0()

l.Training_on_bins(l.Folder + l.TData, 60000);
l.To_bin_or_not_to_bin(l.Data, 60000);
l.P_vs_NP(l.Data, 60000);

l.Maxime(l.cut);
l.Add_BDT_var_float(l.cut, l.Pi0, l.TPi0);



